{"ast":null,"code":"import axios from 'axios';\nimport { CART_CLEAR_ITEMS } from '../constants/cartConstants';\nimport { ORDER_CREATE_REQUEST, ORDER_CREATE_SUCCESS, ORDER_CREATE_FAIL, ORDER_DETAILS_FAIL, ORDER_DETAILS_SUCCESS, ORDER_DETAILS_REQUEST, ORDER_PAY_FAIL, ORDER_PAY_SUCCESS, ORDER_PAY_REQUEST, ORDER_LIST_MY_REQUEST, ORDER_LIST_MY_SUCCESS, ORDER_LIST_MY_FAIL, ORDER_LIST_FAIL, ORDER_LIST_SUCCESS, ORDER_LIST_REQUEST, ORDER_DELIVER_FAIL, ORDER_DELIVER_SUCCESS, ORDER_DELIVER_REQUEST } from '../constants/orderConstants';\nimport { logout } from './userActions';\nexport const createOrder = order => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ORDER_CREATE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.post(`/api/orders`, order, config);\n    dispatch({\n      type: ORDER_CREATE_SUCCESS,\n      payload: data\n    }); // dispatch({\n    // type: CART_CLEAR_ITEMS,\n    // payload: data,\n    // })\n    // localStorage.removeItem('cartItems')\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n\n    if (message === 'Not authorized, token failed') {\n      dispatch(logout());\n    }\n\n    dispatch({\n      type: ORDER_CREATE_FAIL,\n      payload: message\n    });\n  }\n};\nexport const getOrderDetails = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ORDER_DETAILS_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.get(`/api/orders/${id}`, config);\n    dispatch({\n      type: ORDER_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n\n    if (message === 'Not authorized, token failed') {\n      dispatch(logout());\n    }\n\n    dispatch({\n      type: ORDER_DETAILS_FAIL,\n      payload: message\n    });\n  }\n};\nexport const payOrder = (orderId, paymentResult) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ORDER_PAY_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.put(`/api/orders/${orderId}/pay`, paymentResult, config);\n    dispatch({\n      type: ORDER_PAY_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n\n    if (message === 'Not authorized, token failed') {\n      dispatch(logout());\n    }\n\n    dispatch({\n      type: ORDER_PAY_FAIL,\n      payload: message\n    });\n  }\n};\nexport const deliverOrder = order => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ORDER_DELIVER_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.put(`/api/orders/${order._id}/deliver`, {}, config);\n    dispatch({\n      type: ORDER_DELIVER_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n\n    if (message === 'Not authorized, token failed') {\n      dispatch(logout());\n    }\n\n    dispatch({\n      type: ORDER_DELIVER_FAIL,\n      payload: message\n    });\n  }\n};\nexport const listMyOrders = () => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ORDER_LIST_MY_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.get(`/api/orders/myorders`, config);\n    dispatch({\n      type: ORDER_LIST_MY_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n\n    if (message === 'Not authorized, token failed') {\n      dispatch(logout());\n    }\n\n    dispatch({\n      type: ORDER_LIST_MY_FAIL,\n      payload: message\n    });\n  }\n};\nexport const listOrders = () => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ORDER_LIST_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.get(`/api/orders`, config);\n    dispatch({\n      type: ORDER_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n\n    if (message === 'Not authorized, token failed') {\n      dispatch(logout());\n    }\n\n    dispatch({\n      type: ORDER_LIST_FAIL,\n      payload: message\n    });\n  }\n};","map":{"version":3,"sources":["/Users/mereilim/Desktop/Project/frontend/src/actions/orderActions.js"],"names":["axios","CART_CLEAR_ITEMS","ORDER_CREATE_REQUEST","ORDER_CREATE_SUCCESS","ORDER_CREATE_FAIL","ORDER_DETAILS_FAIL","ORDER_DETAILS_SUCCESS","ORDER_DETAILS_REQUEST","ORDER_PAY_FAIL","ORDER_PAY_SUCCESS","ORDER_PAY_REQUEST","ORDER_LIST_MY_REQUEST","ORDER_LIST_MY_SUCCESS","ORDER_LIST_MY_FAIL","ORDER_LIST_FAIL","ORDER_LIST_SUCCESS","ORDER_LIST_REQUEST","ORDER_DELIVER_FAIL","ORDER_DELIVER_SUCCESS","ORDER_DELIVER_REQUEST","logout","createOrder","order","dispatch","getState","type","userLogin","userInfo","config","headers","Authorization","token","data","post","payload","error","message","response","getOrderDetails","id","get","payOrder","orderId","paymentResult","put","deliverOrder","_id","listMyOrders","listOrders"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport { CART_CLEAR_ITEMS } from '../constants/cartConstants'\nimport {\n    ORDER_CREATE_REQUEST,\n    ORDER_CREATE_SUCCESS,\n    ORDER_CREATE_FAIL,\n\n    ORDER_DETAILS_FAIL,\n    ORDER_DETAILS_SUCCESS,\n    ORDER_DETAILS_REQUEST,\n\n    ORDER_PAY_FAIL,\n    ORDER_PAY_SUCCESS,\n    ORDER_PAY_REQUEST,\n\n    ORDER_LIST_MY_REQUEST,\n    ORDER_LIST_MY_SUCCESS,\n    ORDER_LIST_MY_FAIL,\n    ORDER_LIST_FAIL,\n    ORDER_LIST_SUCCESS,\n    ORDER_LIST_REQUEST,\n\n    ORDER_DELIVER_FAIL,\n    ORDER_DELIVER_SUCCESS,\n    ORDER_DELIVER_REQUEST,\n} from '../constants/orderConstants'\nimport { logout } from './userActions'\n\nexport const createOrder = (order) => async (dispatch, getState) => {\n    try {\n        dispatch({\n        type: ORDER_CREATE_REQUEST,\n        })\n\n        const {\n        userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n        headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${userInfo.token}`,\n        },\n        }\n\n        const { data } = await axios.post(`/api/orders`, order, config)\n\n        dispatch({\n        type: ORDER_CREATE_SUCCESS,\n        payload: data,\n        })\n        // dispatch({\n        // type: CART_CLEAR_ITEMS,\n        // payload: data,\n        // })\n        // localStorage.removeItem('cartItems')\n    } catch (error) {\n        const message =\n        error.response && error.response.data.message\n            ? error.response.data.message\n            : error.message\n        if (message === 'Not authorized, token failed') {\n        dispatch(logout())\n        }\n        dispatch({\n        type: ORDER_CREATE_FAIL,\n        payload: message,\n        })\n    }\n}\n\nexport const getOrderDetails = (id) => async (dispatch, getState) => {\n    try {\n        dispatch({\n        type: ORDER_DETAILS_REQUEST,\n        })\n\n        const {\n        userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n        headers: {\n            Authorization: `Bearer ${userInfo.token}`,\n        },\n        }\n\n        const { data } = await axios.get(`/api/orders/${id}`, config)\n\n        dispatch({\n        type: ORDER_DETAILS_SUCCESS,\n        payload: data,\n        })\n    } catch (error) {\n        const message =\n        error.response && error.response.data.message\n            ? error.response.data.message\n            : error.message\n        if (message === 'Not authorized, token failed') {\n        dispatch(logout())\n        }\n        dispatch({\n        type: ORDER_DETAILS_FAIL,\n        payload: message,\n        })\n    }\n}\n\nexport const payOrder = (orderId, paymentResult) => async (\n    dispatch,\n    getState\n    ) => {\n    try {\n        dispatch({\n        type: ORDER_PAY_REQUEST,\n        })\n\n        const {\n        userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n        headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${userInfo.token}`,\n        },\n        }\n\n        const { data } = await axios.put(`/api/orders/${orderId}/pay`,paymentResult,config)\n\n        dispatch({\n        type: ORDER_PAY_SUCCESS,\n        payload: data,\n        })\n    } catch (error) {\n        const message =\n        error.response && error.response.data.message\n            ? error.response.data.message\n            : error.message\n        if (message === 'Not authorized, token failed') {\n        dispatch(logout())\n        }\n        dispatch({\n        type: ORDER_PAY_FAIL,\n        payload: message,\n        })\n    }\n}\n\nexport const deliverOrder = (order) => async (dispatch, getState) => {\n    try {\n        dispatch({\n        type: ORDER_DELIVER_REQUEST,\n        })\n\n        const {\n        userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n        headers: {\n            Authorization: `Bearer ${userInfo.token}`,\n        },\n        }\n\n        const { data } = await axios.put(\n        `/api/orders/${order._id}/deliver`,\n        {},\n        config\n        )\n\n        dispatch({\n        type: ORDER_DELIVER_SUCCESS,\n        payload: data,\n        })\n    } catch (error) {\n        const message =\n        error.response && error.response.data.message\n            ? error.response.data.message\n            : error.message\n        if (message === 'Not authorized, token failed') {\n        dispatch(logout())\n        }\n        dispatch({\n        type: ORDER_DELIVER_FAIL,\n        payload: message,\n        })\n    }\n}\n\nexport const listMyOrders = () => async (dispatch, getState) => {\n    try {\n        dispatch({\n        type: ORDER_LIST_MY_REQUEST,\n        })\n\n        const {\n        userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n        headers: {\n            Authorization: `Bearer ${userInfo.token}`,\n        },\n        }\n\n        const { data } = await axios.get(`/api/orders/myorders`, config)\n\n        dispatch({\n        type: ORDER_LIST_MY_SUCCESS,\n        payload: data,\n        })\n    } catch (error) {\n        const message =\n        error.response && error.response.data.message\n            ? error.response.data.message\n            : error.message\n        if (message === 'Not authorized, token failed') {\n        dispatch(logout())\n        }\n        dispatch({\n        type: ORDER_LIST_MY_FAIL,\n        payload: message,\n        })\n    }\n}\n\nexport const listOrders = () => async (dispatch, getState) => {\n    try {\n        dispatch({\n        type: ORDER_LIST_REQUEST,\n        })\n\n        const {\n        userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n        headers: {\n            Authorization: `Bearer ${userInfo.token}`,\n        },\n        }\n\n        const { data } = await axios.get(`/api/orders`, config)\n\n        dispatch({\n        type: ORDER_LIST_SUCCESS,\n        payload: data,\n        })\n    } catch (error) {\n        const message =\n        error.response && error.response.data.message\n            ? error.response.data.message\n            : error.message\n        if (message === 'Not authorized, token failed') {\n        dispatch(logout())\n        }\n        dispatch({\n        type: ORDER_LIST_FAIL,\n        payload: message,\n        })\n    }\n}"]},"metadata":{},"sourceType":"module"}